// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2021 17:41:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_project
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_project_vlg_sample_tst(
	clk,
	ps2k_clk,
	ps2k_data,
	rst,
	sampler_tx
);
input  clk;
input  ps2k_clk;
input  ps2k_data;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ps2k_clk or ps2k_data or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_project_vlg_check_tst (
	out2,
	pin_name1,
	ps2_byte,
	state,
	state2,
	temp_data,
	test,
	sampler_rx
);
input [1:0] out2;
input  pin_name1;
input [7:0] ps2_byte;
input [1:0] state;
input [1:0] state2;
input [7:0] temp_data;
input [4:0] test;
input sampler_rx;

reg [1:0] out2_expected;
reg  pin_name1_expected;
reg [7:0] ps2_byte_expected;
reg [1:0] state_expected;
reg [1:0] state2_expected;
reg [7:0] temp_data_expected;
reg [4:0] test_expected;

reg [1:0] out2_prev;
reg  pin_name1_prev;
reg [7:0] ps2_byte_prev;
reg [1:0] state_prev;
reg [1:0] state2_prev;
reg [7:0] temp_data_prev;
reg [4:0] test_prev;

reg [1:0] out2_expected_prev;
reg  pin_name1_expected_prev;
reg [7:0] ps2_byte_expected_prev;
reg [1:0] state_expected_prev;
reg [7:0] temp_data_expected_prev;

reg [1:0] last_out2_exp;
reg  last_pin_name1_exp;
reg [7:0] last_ps2_byte_exp;
reg [1:0] last_state_exp;
reg [7:0] last_temp_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	out2_prev = out2;
	pin_name1_prev = pin_name1;
	ps2_byte_prev = ps2_byte;
	state_prev = state;
	state2_prev = state2;
	temp_data_prev = temp_data;
	test_prev = test;
end

// update expected /o prevs

always @(trigger)
begin
	out2_expected_prev = out2_expected;
	pin_name1_expected_prev = pin_name1_expected;
	ps2_byte_expected_prev = ps2_byte_expected;
	state_expected_prev = state_expected;
	temp_data_expected_prev = temp_data_expected;
end


// expected out2[ 1 ]
initial
begin
	out2_expected[1] = 1'bX;
end 
// expected out2[ 0 ]
initial
begin
	out2_expected[0] = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 
// expected ps2_byte[ 7 ]
initial
begin
	ps2_byte_expected[7] = 1'bX;
end 
// expected ps2_byte[ 6 ]
initial
begin
	ps2_byte_expected[6] = 1'bX;
end 
// expected ps2_byte[ 5 ]
initial
begin
	ps2_byte_expected[5] = 1'bX;
end 
// expected ps2_byte[ 4 ]
initial
begin
	ps2_byte_expected[4] = 1'bX;
end 
// expected ps2_byte[ 3 ]
initial
begin
	ps2_byte_expected[3] = 1'bX;
end 
// expected ps2_byte[ 2 ]
initial
begin
	ps2_byte_expected[2] = 1'bX;
end 
// expected ps2_byte[ 1 ]
initial
begin
	ps2_byte_expected[1] = 1'bX;
end 
// expected ps2_byte[ 0 ]
initial
begin
	ps2_byte_expected[0] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// expected temp_data[ 7 ]
initial
begin
	temp_data_expected[7] = 1'bX;
end 
// expected temp_data[ 6 ]
initial
begin
	temp_data_expected[6] = 1'bX;
end 
// expected temp_data[ 5 ]
initial
begin
	temp_data_expected[5] = 1'bX;
end 
// expected temp_data[ 4 ]
initial
begin
	temp_data_expected[4] = 1'bX;
end 
// expected temp_data[ 3 ]
initial
begin
	temp_data_expected[3] = 1'bX;
end 
// expected temp_data[ 2 ]
initial
begin
	temp_data_expected[2] = 1'bX;
end 
// expected temp_data[ 1 ]
initial
begin
	temp_data_expected[1] = 1'bX;
end 
// expected temp_data[ 0 ]
initial
begin
	temp_data_expected[0] = 1'bX;
end 
// generate trigger
always @(out2_expected or out2 or pin_name1_expected or pin_name1 or ps2_byte_expected or ps2_byte or state_expected or state or state2_expected or state2 or temp_data_expected or temp_data or test_expected or test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out2 = %b | expected pin_name1 = %b | expected ps2_byte = %b | expected state = %b | expected state2 = %b | expected temp_data = %b | expected test = %b | ",out2_expected_prev,pin_name1_expected_prev,ps2_byte_expected_prev,state_expected_prev,state2_expected_prev,temp_data_expected_prev,test_expected_prev);
	$display("| real out2 = %b | real pin_name1 = %b | real ps2_byte = %b | real state = %b | real state2 = %b | real temp_data = %b | real test = %b | ",out2_prev,pin_name1_prev,ps2_byte_prev,state_prev,state2_prev,temp_data_prev,test_prev);
`endif
	if (
		( out2_expected_prev[0] !== 1'bx ) && ( out2_prev[0] !== out2_expected_prev[0] )
		&& ((out2_expected_prev[0] !== last_out2_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out2_exp[0] = out2_expected_prev[0];
	end
	if (
		( out2_expected_prev[1] !== 1'bx ) && ( out2_prev[1] !== out2_expected_prev[1] )
		&& ((out2_expected_prev[1] !== last_out2_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out2_expected_prev);
		$display ("     Real value = %b", out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out2_exp[1] = out2_expected_prev[1];
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( ps2_byte_expected_prev[0] !== 1'bx ) && ( ps2_byte_prev[0] !== ps2_byte_expected_prev[0] )
		&& ((ps2_byte_expected_prev[0] !== last_ps2_byte_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[0] = ps2_byte_expected_prev[0];
	end
	if (
		( ps2_byte_expected_prev[1] !== 1'bx ) && ( ps2_byte_prev[1] !== ps2_byte_expected_prev[1] )
		&& ((ps2_byte_expected_prev[1] !== last_ps2_byte_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[1] = ps2_byte_expected_prev[1];
	end
	if (
		( ps2_byte_expected_prev[2] !== 1'bx ) && ( ps2_byte_prev[2] !== ps2_byte_expected_prev[2] )
		&& ((ps2_byte_expected_prev[2] !== last_ps2_byte_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[2] = ps2_byte_expected_prev[2];
	end
	if (
		( ps2_byte_expected_prev[3] !== 1'bx ) && ( ps2_byte_prev[3] !== ps2_byte_expected_prev[3] )
		&& ((ps2_byte_expected_prev[3] !== last_ps2_byte_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[3] = ps2_byte_expected_prev[3];
	end
	if (
		( ps2_byte_expected_prev[4] !== 1'bx ) && ( ps2_byte_prev[4] !== ps2_byte_expected_prev[4] )
		&& ((ps2_byte_expected_prev[4] !== last_ps2_byte_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[4] = ps2_byte_expected_prev[4];
	end
	if (
		( ps2_byte_expected_prev[5] !== 1'bx ) && ( ps2_byte_prev[5] !== ps2_byte_expected_prev[5] )
		&& ((ps2_byte_expected_prev[5] !== last_ps2_byte_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[5] = ps2_byte_expected_prev[5];
	end
	if (
		( ps2_byte_expected_prev[6] !== 1'bx ) && ( ps2_byte_prev[6] !== ps2_byte_expected_prev[6] )
		&& ((ps2_byte_expected_prev[6] !== last_ps2_byte_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[6] = ps2_byte_expected_prev[6];
	end
	if (
		( ps2_byte_expected_prev[7] !== 1'bx ) && ( ps2_byte_prev[7] !== ps2_byte_expected_prev[7] )
		&& ((ps2_byte_expected_prev[7] !== last_ps2_byte_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ps2_byte[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ps2_byte_expected_prev);
		$display ("     Real value = %b", ps2_byte_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ps2_byte_exp[7] = ps2_byte_expected_prev[7];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( temp_data_expected_prev[0] !== 1'bx ) && ( temp_data_prev[0] !== temp_data_expected_prev[0] )
		&& ((temp_data_expected_prev[0] !== last_temp_data_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[0] = temp_data_expected_prev[0];
	end
	if (
		( temp_data_expected_prev[1] !== 1'bx ) && ( temp_data_prev[1] !== temp_data_expected_prev[1] )
		&& ((temp_data_expected_prev[1] !== last_temp_data_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[1] = temp_data_expected_prev[1];
	end
	if (
		( temp_data_expected_prev[2] !== 1'bx ) && ( temp_data_prev[2] !== temp_data_expected_prev[2] )
		&& ((temp_data_expected_prev[2] !== last_temp_data_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[2] = temp_data_expected_prev[2];
	end
	if (
		( temp_data_expected_prev[3] !== 1'bx ) && ( temp_data_prev[3] !== temp_data_expected_prev[3] )
		&& ((temp_data_expected_prev[3] !== last_temp_data_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[3] = temp_data_expected_prev[3];
	end
	if (
		( temp_data_expected_prev[4] !== 1'bx ) && ( temp_data_prev[4] !== temp_data_expected_prev[4] )
		&& ((temp_data_expected_prev[4] !== last_temp_data_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[4] = temp_data_expected_prev[4];
	end
	if (
		( temp_data_expected_prev[5] !== 1'bx ) && ( temp_data_prev[5] !== temp_data_expected_prev[5] )
		&& ((temp_data_expected_prev[5] !== last_temp_data_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[5] = temp_data_expected_prev[5];
	end
	if (
		( temp_data_expected_prev[6] !== 1'bx ) && ( temp_data_prev[6] !== temp_data_expected_prev[6] )
		&& ((temp_data_expected_prev[6] !== last_temp_data_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[6] = temp_data_expected_prev[6];
	end
	if (
		( temp_data_expected_prev[7] !== 1'bx ) && ( temp_data_prev[7] !== temp_data_expected_prev[7] )
		&& ((temp_data_expected_prev[7] !== last_temp_data_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_data_expected_prev);
		$display ("     Real value = %b", temp_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_temp_data_exp[7] = temp_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_project_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ps2k_clk;
reg ps2k_data;
reg rst;
// wires                                               
wire [1:0] out2;
wire pin_name1;
wire [7:0] ps2_byte;
wire [1:0] state;
wire [1:0] state2;
wire [7:0] temp_data;
wire [4:0] test;

wire sampler;                             

// assign statements (if any)                          
final_project i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.out2(out2),
	.pin_name1(pin_name1),
	.ps2_byte(ps2_byte),
	.ps2k_clk(ps2k_clk),
	.ps2k_data(ps2k_data),
	.rst(rst),
	.state(state),
	.state2(state2),
	.temp_data(temp_data),
	.test(test)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// ps2k_data
initial
begin
	ps2k_data = 1'b0;
	ps2k_data = #7680000 1'b1;
	ps2k_data = #640000 1'b0;
	ps2k_data = #1520000 1'b1;
	ps2k_data = #960000 1'b0;
	ps2k_data = #1040000 1'b1;
	ps2k_data = #960000 1'b0;
	ps2k_data = #8960000 1'b1;
	ps2k_data = #1280000 1'b0;
	ps2k_data = #10480000 1'b1;
	ps2k_data = #1040000 1'b0;
	ps2k_data = #1120000 1'b1;
	ps2k_data = #960000 1'b0;
	ps2k_data = #1040000 1'b1;
	ps2k_data = #800000 1'b0;
	ps2k_data = #1200000 1'b1;
	ps2k_data = #640000 1'b0;
	ps2k_data = #1440000 1'b1;
	ps2k_data = #560000 1'b0;
	ps2k_data = #1280000 1'b1;
	ps2k_data = #880000 1'b0;
	ps2k_data = #7040000 1'b1;
	ps2k_data = #800000 1'b0;
	ps2k_data = #1280000 1'b1;
	ps2k_data = #640000 1'b0;
	ps2k_data = #1440000 1'b1;
	ps2k_data = #640000 1'b0;
	ps2k_data = #7360000 1'b1;
	ps2k_data = #640000 1'b0;
	ps2k_data = #1280000 1'b1;
	ps2k_data = #640000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #640000 1'b1;
end 

// ps2k_clk
always
begin
	ps2k_clk = 1'b0;
	ps2k_clk = #1000000 1'b1;
	#1000000;
end 

final_project_vlg_sample_tst tb_sample (
	.clk(clk),
	.ps2k_clk(ps2k_clk),
	.ps2k_data(ps2k_data),
	.rst(rst),
	.sampler_tx(sampler)
);

final_project_vlg_check_tst tb_out(
	.out2(out2),
	.pin_name1(pin_name1),
	.ps2_byte(ps2_byte),
	.state(state),
	.state2(state2),
	.temp_data(temp_data),
	.test(test),
	.sampler_rx(sampler)
);
endmodule

