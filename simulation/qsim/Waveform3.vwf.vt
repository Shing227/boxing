// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2021 03:21:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final_project
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_project_vlg_sample_tst(
	act,
	clk,
	rst,
	sampler_tx
);
input [1:0] act;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(act or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_project_vlg_check_tst (
	led_ctrl,
	state,
	test,
	sampler_rx
);
input [2:0] led_ctrl;
input [1:0] state;
input [3:0] test;
input sampler_rx;

reg [2:0] led_ctrl_expected;
reg [1:0] state_expected;
reg [3:0] test_expected;

reg [2:0] led_ctrl_prev;
reg [1:0] state_prev;
reg [3:0] test_prev;

reg [2:0] led_ctrl_expected_prev;
reg [1:0] state_expected_prev;
reg [3:0] test_expected_prev;

reg [2:0] last_led_ctrl_exp;
reg [1:0] last_state_exp;
reg [3:0] last_test_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_ctrl_prev = led_ctrl;
	state_prev = state;
	test_prev = test;
end

// update expected /o prevs

always @(trigger)
begin
	led_ctrl_expected_prev = led_ctrl_expected;
	state_expected_prev = state_expected;
	test_expected_prev = test_expected;
end


// expected led_ctrl[ 2 ]
initial
begin
	led_ctrl_expected[2] = 1'bX;
	led_ctrl_expected[2] = #999000 1'b0;
end 
// expected led_ctrl[ 1 ]
initial
begin
	led_ctrl_expected[1] = 1'bX;
	led_ctrl_expected[1] = #999000 1'b0;
end 
// expected led_ctrl[ 0 ]
initial
begin
	led_ctrl_expected[0] = 1'bX;
	led_ctrl_expected[0] = #999000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
	state_expected[1] = #999000 1'b0;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
	state_expected[0] = #999000 1'b0;
end 
// expected test[ 3 ]
initial
begin
	test_expected[3] = 1'bX;
	test_expected[3] = #999000 1'b0;
end 
// expected test[ 2 ]
initial
begin
	test_expected[2] = 1'bX;
	test_expected[2] = #999000 1'b0;
end 
// expected test[ 1 ]
initial
begin
	test_expected[1] = 1'bX;
	test_expected[1] = #999000 1'b0;
end 
// expected test[ 0 ]
initial
begin
	test_expected[0] = 1'bX;
	test_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(led_ctrl_expected or led_ctrl or state_expected or state or test_expected or test)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_ctrl = %b | expected state = %b | expected test = %b | ",led_ctrl_expected_prev,state_expected_prev,test_expected_prev);
	$display("| real led_ctrl = %b | real state = %b | real test = %b | ",led_ctrl_prev,state_prev,test_prev);
`endif
	if (
		( led_ctrl_expected_prev[0] !== 1'bx ) && ( led_ctrl_prev[0] !== led_ctrl_expected_prev[0] )
		&& ((led_ctrl_expected_prev[0] !== last_led_ctrl_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_ctrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_ctrl_expected_prev);
		$display ("     Real value = %b", led_ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_ctrl_exp[0] = led_ctrl_expected_prev[0];
	end
	if (
		( led_ctrl_expected_prev[1] !== 1'bx ) && ( led_ctrl_prev[1] !== led_ctrl_expected_prev[1] )
		&& ((led_ctrl_expected_prev[1] !== last_led_ctrl_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_ctrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_ctrl_expected_prev);
		$display ("     Real value = %b", led_ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_ctrl_exp[1] = led_ctrl_expected_prev[1];
	end
	if (
		( led_ctrl_expected_prev[2] !== 1'bx ) && ( led_ctrl_prev[2] !== led_ctrl_expected_prev[2] )
		&& ((led_ctrl_expected_prev[2] !== last_led_ctrl_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_ctrl[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_ctrl_expected_prev);
		$display ("     Real value = %b", led_ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_ctrl_exp[2] = led_ctrl_expected_prev[2];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( test_expected_prev[0] !== 1'bx ) && ( test_prev[0] !== test_expected_prev[0] )
		&& ((test_expected_prev[0] !== last_test_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[0] = test_expected_prev[0];
	end
	if (
		( test_expected_prev[1] !== 1'bx ) && ( test_prev[1] !== test_expected_prev[1] )
		&& ((test_expected_prev[1] !== last_test_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[1] = test_expected_prev[1];
	end
	if (
		( test_expected_prev[2] !== 1'bx ) && ( test_prev[2] !== test_expected_prev[2] )
		&& ((test_expected_prev[2] !== last_test_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[2] = test_expected_prev[2];
	end
	if (
		( test_expected_prev[3] !== 1'bx ) && ( test_prev[3] !== test_expected_prev[3] )
		&& ((test_expected_prev[3] !== last_test_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_expected_prev);
		$display ("     Real value = %b", test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_test_exp[3] = test_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_project_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] act;
reg clk;
reg rst;
// wires                                               
wire [2:0] led_ctrl;
wire [1:0] state;
wire [3:0] test;

wire sampler;                             

// assign statements (if any)                          
final_project i1 (
// port map - connection between master ports and signals/registers   
	.act(act),
	.clk(clk),
	.led_ctrl(led_ctrl),
	.rst(rst),
	.state(state),
	.test(test)
);
// act[ 1 ]
initial
begin
	act[1] = 1'b1;
end 
// act[ 0 ]
initial
begin
	act[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #80000 1'b1;
end 

final_project_vlg_sample_tst tb_sample (
	.act(act),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

final_project_vlg_check_tst tb_out(
	.led_ctrl(led_ctrl),
	.state(state),
	.test(test),
	.sampler_rx(sampler)
);
endmodule

